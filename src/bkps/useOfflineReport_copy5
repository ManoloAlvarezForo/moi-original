// import {useCallback, useEffect, useMemo, useState} from 'react';
// import {useApolloClient, useQuery} from '@apollo/client';
// import {DEFAULT_REPORT_GQL, GET_REPORTS} from '../screens/Reports/gqlQueries';
// import {useOfflineUser} from './useOfflineUser';
// import moment from 'moment';
// import {ReportType} from '../types/report';

// export function useOfflineReport() {
//   const [defaultReport, setDefaultReport] = useState<any>();
//   const {cache} = useApolloClient();
//   const {userId} = useOfflineUser();

//   console.log('useOfflineReport: ', defaultReport);

//   const {
//     loading: defaultReportLoading,
//     error: defaultReportError,
//     data: dataDefaultReport,
//   } = useQuery(DEFAULT_REPORT_GQL, {
//     fetchPolicy: 'cache-only',
//     variables: {userId},
//   });

//   console.log(
//     'useOfflineReport   defaultReport: \n -----------> ',
//     defaultReport,
//   );

//   useEffect(() => {
//     if (dataDefaultReport && !defaultReportLoading && !defaultReportError) {
//       console.log('CACHE:   ', cache);

//       setDefaultReport(
//         dataDefaultReport.defaultReport === null
//           ? undefined
//           : dataDefaultReport?.defaultReport,
//       );
//     }
//   }, [cache, dataDefaultReport, defaultReportError, defaultReportLoading]);

//   const reportsMemo = useMemo(() => {
//     const response: any = cache.readQuery({query: GET_REPORTS});
//     return response?.reports;
//   }, [cache]);

//   const defaultReportMemo = useMemo(() => {
//     console.log('defaultReportMemo executed');
//     const response: any = cache.readQuery({
//       query: DEFAULT_REPORT_GQL,
//       variables: {userId},
//     });

//     const defaultReportResponse = response?.defaultReport;

//     return defaultReportResponse;
//   }, [cache, userId]);

//   const reports = useCallback(() => {
//     console.log('reports useCallback');
//     const response: any = cache.readQuery({query: GET_REPORTS});
//     return response?.reports;
//   }, [cache]);

//   const getReports = useCallback(() => {
//     const response: any = cache.readQuery({query: GET_REPORTS});
//     console.log('GET REPORTS METHOD CALLED');
//     return response?.reports;
//   }, [cache]);

//   const getDefaultReport = useCallback(() => {
//     const response: any = cache.readQuery({
//       query: DEFAULT_REPORT_GQL,
//       variables: {userId},
//     });
//     return response?.defaultReport;
//   }, [cache, userId]);

//   const addReport = useCallback(
//     (monthParam: string, yearParam: string) => {
//       const newDefaultReport: ReportType = {
//         id: `report-${monthParam}-${yearParam}`,
//         userId,
//         month: monthParam,
//         year: yearParam,
//         isDefault: true,
//         hours: 0,
//         videos: 0,
//         bibleStudies: 0,
//         revisits: 0,
//         isCompleted: false,
//         publications: 0,
//         isSent: false,
//         activities: [],
//         activitiesByDate: {},
//         __typename: 'Report',
//       };

//       const data: any = cache.readQuery({query: GET_REPORTS});

//       cache.writeQuery({
//         query: GET_REPORTS,
//         data: {
//           reports: [...(data?.reports || []), newDefaultReport],
//         },
//       });

//       cache.writeQuery({
//         query: DEFAULT_REPORT_GQL,
//         variables: {userId},
//         data: {
//           defaultReport: newDefaultReport,
//         },
//       });
//     },
//     [cache, userId],
//   );

//   const deleteReport = useCallback(
//     async (id: string) => {
//       cache.modify({
//         fields: {
//           reports(reportsRef, {readField}) {
//             const filteredReports = reportsRef.filter(
//               (reportRef: any) => id !== readField('id', reportRef),
//             );

//             return filteredReports.length === 0 ? [] : filteredReports;
//           },
//         },
//       });

//       // cache.modify({
//       //   fields: {
//       //     defaultReport(_, {DELETE}) {
//       //       return DELETE;
//       //     },
//       //   },
//       // });

//       // const normalizedId = cache.identify({id, __typename: 'Report'});
//       // cache.evict({id: normalizedId});
//       // cache.gc();

//       cache.updateQuery(
//         {query: DEFAULT_REPORT_GQL, variables: {userId}},
//         () => ({
//           defaultReport: null,
//         }),
//       );
//       // cache.updateQuery(
//       //   {
//       //     query: DEFAULT_REPORT_GQL,
//       //     variables: {userId},
//       //   },
//       //   () => ({
//       //     defaultReport: null,
//       //   }),
//       // );
//     },
//     [cache, userId],
//   );

//   const defaultReportParsedMonth = useMemo(async () => {
//     const {month}: any = (await defaultReport) || '';
//     return moment(month, 'M').format('MMMM');
//   }, [defaultReport]);

//   // TODO: Should I move this method to utils?
//   const getParsedMonth = (monthParam: string) => {
//     return moment(monthParam, 'M').format('MMMM');
//   };

//   const defaultReportParsedYear = useMemo(async () => {
//     const {year}: any = (await defaultReport) || '';
//     return moment(year, 'Y').format('YYYY');
//   }, [defaultReport]);

//   const defaultReportParsedMonthAndYear = useMemo(() => {
//     return `${defaultReportParsedMonth} ${defaultReportParsedYear}`;
//   }, [defaultReportParsedMonth, defaultReportParsedYear]);

//   // const setDefaultReport = useCallback(
//   //   async (report: any) => {
//   //     const newDefaultReport = {
//   //       userId,
//   //       ...defReport,
//   //     };

//   //     cache.updateQuery(
//   //       {
//   //         query: DEFAULT_REPORT_GQL,
//   //         variables: {...newDefaultReport, ...report},
//   //       },
//   //       () => ({
//   //         defaultReport: {...newDefaultReport, ...report},
//   //       }),
//   //     );
//   //   },
//   //   [cache, defReport, userId],
//   // );

//   // const updateDefaultReport = useCallback(
//   //   async (report: any) => {
//   //     // const data: any = cache.readQuery({query: GET_REPORTS});
//   //     // const foundDefaultReport = data?.reports.find(
//   //     //   (r: any) => r.isDefault === true,
//   //     // );

//   //     // const hours = foundDefaultReport.hours + report.hours;

//   //     // const firstDefaultReport = {
//   //     //   id: `report-${moment().format('MM-YYYY')}`,
//   //     //   userId,
//   //     //   month: (new Date().getMonth() + 1).toString(),
//   //     //   year: new Date().getFullYear().toString(),
//   //     //   isDefault: true,
//   //     //   hours,
//   //     //   videos: foundDefaultReport.videos + report.videos,
//   //     //   bibleStudies: foundDefaultReport.bibleStudies + report.bibleStudies,
//   //     //   revisits: foundDefaultReport.revisits + report.revisits,
//   //     //   isCompleted: false,
//   //     //   publications: foundDefaultReport.publications + report.publications,
//   //     //   isSent: false,
//   //     //   activities: [],
//   //     //   __typename: 'Report',
//   //     // };

//   //     // const toReplace = {...foundDefaultReport, ...report};

//   //     // const updatedReport = {...defaultReport, ...report};
//   //     const currentReports: [] = await reports();

//   //     cache.writeQuery({
//   //       query: GET_REPORTS,
//   //       data: {
//   //         reports: [...(currentReports || []), updatedReport],
//   //       },
//   //     });

//   //     cache.updateQuery(
//   //       {
//   //         query: DEFAULT_REPORT_GQL,
//   //         variables: updatedReport,
//   //       },
//   //       () => ({
//   //         defaultReport: updatedReport,
//   //       }),
//   //     );
//   //   },
//   //   [cache, reports, defaultReport],
//   // );

//   return {
//     addReport,
//     defaultReportParsedMonth,
//     defaultReportParsedYear,
//     defaultReportParsedMonthAndYear,
//     defaultReport,
//     setDefaultReport,
//     getDefaultReport,
//     getParsedMonth,
//     deleteReport,
//     reports,
//     getReports,
//     reportsMemo,
//     defaultReportMemo,
//   };
// }
