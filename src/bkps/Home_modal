// /* eslint-disable react-native/no-inline-styles */
// import React, {useEffect, useState} from 'react';
// import {StyleSheet} from 'react-native';
// import ReportDetail from '../Reports/components/ReportDetails/ReportDetail';
// import {useNavigation} from '@react-navigation/native';
// import moment from 'moment';
// import {Text, Button, ScrollView, View} from 'native-base';
// import MonthPicker from './MonthPicker';
// import messages from './Home.messages';
// import Modal from 'react-native-modal';
// import {useOfflineReport} from '../../hooks/useOfflineReport';
// import HeaderTitle from './HeaderTitle';
// import {useDarkMode} from '../../hooks/useDarkMode';
// import notifee, {EventType} from '@notifee/react-native';
// import {capitalizeText} from '../../utils/dates';
// import {useOfflineUser} from '../../hooks/useOfflineUser';
// import Actions from './Actions';

// export default function Home() {
//   const navigation = useNavigation<any>();
//   const today = moment().format('dddd LL');
//   const todayTitle = `${today.charAt(0).toUpperCase()}${today.slice(1)}`;
//   const [openActions, setOpenActions] = useState(false);
//   const [showModal, setShowModal] = useState(false);
//   const [date, setDate] = useState(moment());
//   const {themeSecondary} = useDarkMode();

//   const {defaultReport, addReport} = useOfflineReport();
//   const {user} = useOfflineUser();

//   const addReportHandler = async () => {
//     const month = (date.month() + 1).toString();
//     const year = date.year().toString();

//     addReport(month, year);
//   };

//   const onCloseModal = () => {
//     setShowModal(false);
//   };

//   const onSelectedDateHandler = () => {
//     onCloseModal();
//     addReportHandler();
//   };

//   const {themePrimary} = useDarkMode();

//   useEffect(() => {
//     return notifee.onForegroundEvent(({type, detail}) => {
//       switch (type) {
//         case EventType.DISMISSED:
//           console.log('User dismissed notification', detail.notification);
//           break;
//         case EventType.PRESS:
//           console.log('User pressed notification', detail.notification);
//           break;
//       }
//     });
//   }, []);

//   useEffect(() => {
//     let titleForHeader = 'Inicio';
//     if (defaultReport) {
//       const {month, year} = defaultReport;
//       const title = `${moment(month, 'M').format('MMMM')} ${year}`;
//       titleForHeader = capitalizeText(title);
//     }

//     navigation.setOptions({
//       headerTitle: (props: any) => (
//         <HeaderTitle title={titleForHeader} {...props} />
//       ),
//     });
//   }, [defaultReport, navigation]);

//   const homeEmptyView = (
//     <View
//       style={{
//         flex: 1,
//         justifyContent: 'center',
//         alignItems: 'center',
//         padding: 10,
//         height: 400,
//       }}>
//       <Text style={{fontSize: 22, marginBottom: 20}}>{todayTitle}</Text>
//       <Text color="gray.500">{messages.emptyMessage.defaultMessage}</Text>
//     </View>
//   );

//   const userBibleStudiesCount = user?.bibleStudies
//     ? user?.bibleStudies.length
//     : 0;

//   const currentDefaultReport = (
//     <>
//       <View
//         style={{
//           display: 'flex',
//           flexDirection: 'row',
//           marginHorizontal: 10,
//           marginTop: 10,
//         }}>
//         <Text fontSize="sm">{todayTitle}</Text>
//       </View>
//       <View style={styles.defaultReportContainer}>
//         <ReportDetail
//           {...defaultReport}
//           userBibleStudies={userBibleStudiesCount}
//         />
//       </View>
//     </>
//   );

//   const isEmpty = defaultReport === null || defaultReport === undefined;

//   const onPressFabHandler = () => {
//     isEmpty ? setShowModal(true) : setOpenActions(true);
//   };

//   // const onDisplayNotification = async () => {
//   //   // Request permissions (required for iOS)
//   //   await notifee.requestPermission();

//   //   // Create a channel (required for Android)
//   //   const channelId = await notifee.createChannel({
//   //     id: 'default',
//   //     name: 'Default Channel',
//   //     sound: 'bell',
//   //   });

//   //   // Display a notification
//   //   await notifee.displayNotification({
//   //     title: 'Moi Notification',
//   //     body: 'Este es un Local Notification de prueba para ver como se ve sin ningun tipo de implementacion.',
//   //     android: {
//   //       channelId,
//   //       sound: 'bell',
//   //       // smallIcon: 'name-of-a-small-icon', // optional, defaults to 'ic_launcher'.
//   //       // pressAction is needed if you want the notification to open the app when pressed
//   //       pressAction: {
//   //         id: 'default',
//   //       },
//   //     },
//   //   });
//   // };

//   return (
//     <>
//       <ScrollView bg={themePrimary}>
//         <ScrollView>
//           <View>{isEmpty ? homeEmptyView : currentDefaultReport}</View>
//         </ScrollView>
//         <Modal
//           isVisible={showModal}
//           onBackdropPress={() => setShowModal(false)}
//           onBackButtonPress={() => setShowModal(false)}
//           swipeDirection="down"
//           onSwipeComplete={() => setShowModal(false)}
//           animationIn="bounceInUp"
//           animationInTiming={500}
//           animationOut="bounceOutDown"
//           animationOutTiming={500}>
//           <View style={styles.modalView} bg={themeSecondary}>
//             <MonthPicker date={date} setDate={setDate} />
//             <View
//               style={{
//                 display: 'flex',
//                 flexDirection: 'row',
//                 marginLeft: 'auto',
//                 paddingTop: 20,
//               }}>
//               <Button variant="ghost" onPress={onCloseModal}>
//                 {messages.selectMonthYearCancelButtonLabel.defaultMessage}
//               </Button>
//               <Button style={{marginLeft: 10}} onPress={onSelectedDateHandler}>
//                 {messages.selectMonthYearSelectButtonLabel.defaultMessage}
//               </Button>
//             </View>
//           </View>
//         </Modal>
//       </ScrollView>
//       <Actions
//         setOpenActions={setOpenActions}
//         openActions={openActions}
//         onPressFab={onPressFabHandler}
//       />
//     </>
//   );
// }

// const styles = StyleSheet.create({
//   container: {
//     flex: 1,
//     justifyContent: 'flex-start',
//     alignItems: 'flex-start',
//     marginHorizontal: '2%',
//     marginVertical: '2%',
//   },
//   defaultReportContainer: {
//     paddingHorizontal: 5,
//     paddingVertical: 5,
//     flexWrap: 'wrap',
//     flexDirection: 'row',
//     display: 'flex',
//   },
//   message: {
//     color: '#6E6E6E',
//   },
//   centeredView: {
//     backgroundColor: '#000000AA',
//     flex: 1,
//     justifyContent: 'center',
//     alignItems: 'center',
//   },
//   modalView: {
//     margin: 20,
//     borderRadius: 5,
//     paddingVertical: 20,
//     paddingHorizontal: 20,
//     alignItems: 'center',
//     shadowColor: '#000',
//     shadowOffset: {
//       width: 0,
//       height: 2,
//     },
//     shadowOpacity: 0.25,
//     shadowRadius: 4,
//     elevation: 5,
//   },
// });
