// import {useCallback, useEffect, useMemo, useState} from 'react';
// import {useApolloClient, useQuery} from '@apollo/client';
// import {DEFAULT_REPORT_GQL, GET_REPORTS} from '../screens/Reports/gqlQueries';
// import {useOfflineUser} from './useOfflineUser';
// import moment from 'moment';
// import {ReportType} from '../types/report';

// export function useOfflineReport() {
//   const [reports, setReports] = useState<[ReportType]>();
//   // const [defaultReport, setDefaultReport] = useState<ReportType>();
//   const {cache} = useApolloClient();
//   const {userId} = useOfflineUser();

//   // const {
//   //   loading: defaultReportLoading,
//   //   error: defaultReportError,
//   //   data: dataDefaultReport,
//   // } = useQuery(DEFAULT_REPORT_GQL, {
//   //   fetchPolicy: 'cache-only',
//   //   variables: {userId},
//   //   notifyOnNetworkStatusChange: true,
//   // });

//   const {
//     loading: reportsLoading,
//     error: reportsError,
//     data: dataReports,
//   } = useQuery(GET_REPORTS, {
//     fetchPolicy: 'cache-only',
//     notifyOnNetworkStatusChange: true,
//   });

//   // useEffect(() => {
//   //   if (dataDefaultReport && !defaultReportLoading && !defaultReportError) {
//   //     setDefReport(dataDefaultReport?.defaultReport);
//   //   }
//   // }, [dataDefaultReport, defaultReportError, defaultReportLoading]);

//   useEffect(() => {
//     if (dataReports && !reportsLoading && !reportsError) {
//       setReports(dataReports?.reports);
//     }
//   }, [dataReports, reportsError, reportsLoading]);

//   // const reports = useCallback(() => {
//   //   const response: any = cache.readQuery({query: GET_REPORTS});
//   //   console.log('REPORTS METHOD WAS CALLED');
//   //   return response?.reports;
//   // }, [cache]);

//   const defaultReport = useCallback(() => {
//     console.log('set defaultReport');
//     return reports?.find((r: any) => r.isDefault === true);
//   }, [reports]);

//   const addReport = useCallback(
//     (monthParam: string, yearParam: string) => {
//       const newDefaultReport: ReportType = {
//         id: `report-${monthParam}-${yearParam}`,
//         userId,
//         month: monthParam,
//         year: yearParam,
//         isDefault: true,
//         hours: 0,
//         videos: 0,
//         bibleStudies: 0,
//         revisits: 0,
//         isCompleted: false,
//         publications: 0,
//         isSent: false,
//         activities: [],
//         activitiesByDate: {},
//         __typename: 'Report',
//       };

//       const data: any = cache.readQuery({query: GET_REPORTS});

//       cache.writeQuery({
//         query: GET_REPORTS,
//         data: {
//           reports: [...(data?.reports || []), newDefaultReport],
//         },
//       });

//       cache.updateQuery(
//         {
//           query: DEFAULT_REPORT_GQL,
//           variables: newDefaultReport,
//         },
//         () => ({
//           defaultReport: newDefaultReport,
//         }),
//       );
//     },
//     [cache, userId],
//   );

//   const deleteReport = useCallback(
//     async (id: string) => {
//       cache.modify({
//         fields: {
//           reports(reportsRef, {readField}) {
//             const filteredReports = reportsRef.filter(
//               (reportRef: any) => id !== readField('id', reportRef),
//             );

//             setReports(filteredReports);

//             return filteredReports.length === 0 ? {} : filteredReports;
//           },
//         },
//       });
//     },
//     [cache],
//   );

//   const defaultReportParsedMonth = useMemo(async () => {
//     const {month}: any = (await defaultReport) || '';
//     return moment(month, 'M').format('MMMM');
//   }, [defaultReport]);

//   // TODO: Should I move this method to utils?
//   const getParsedMonth = (monthParam: string) => {
//     return moment(monthParam, 'M').format('MMMM');
//   };

//   const defaultReportParsedYear = useMemo(async () => {
//     const {year}: any = (await defaultReport) || '';
//     return moment(year, 'Y').format('YYYY');
//   }, [defaultReport]);

//   const defaultReportParsedMonthAndYear = useMemo(() => {
//     return `${defaultReportParsedMonth} ${defaultReportParsedYear}`;
//   }, [defaultReportParsedMonth, defaultReportParsedYear]);

//   const setDefaultReport = useCallback(
//     async (report: any) => {
//       const newDefaultReport = {
//         userId,
//         ...defaultReport,
//       };

//       cache.updateQuery(
//         {
//           query: DEFAULT_REPORT_GQL,
//           variables: {...newDefaultReport, ...report},
//         },
//         () => ({
//           defaultReport: {...newDefaultReport, ...report},
//         }),
//       );
//     },
//     [cache, defaultReport, userId],
//   );

//   const updateDefaultReport = useCallback(
//     async (report: any) => {
//       // const data: any = cache.readQuery({query: GET_REPORTS});
//       // const foundDefaultReport = data?.reports.find(
//       //   (r: any) => r.isDefault === true,
//       // );

//       // const hours = foundDefaultReport.hours + report.hours;

//       // const firstDefaultReport = {
//       //   id: `report-${moment().format('MM-YYYY')}`,
//       //   userId,
//       //   month: (new Date().getMonth() + 1).toString(),
//       //   year: new Date().getFullYear().toString(),
//       //   isDefault: true,
//       //   hours,
//       //   videos: foundDefaultReport.videos + report.videos,
//       //   bibleStudies: foundDefaultReport.bibleStudies + report.bibleStudies,
//       //   revisits: foundDefaultReport.revisits + report.revisits,
//       //   isCompleted: false,
//       //   publications: foundDefaultReport.publications + report.publications,
//       //   isSent: false,
//       //   activities: [],
//       //   __typename: 'Report',
//       // };

//       // const toReplace = {...foundDefaultReport, ...report};

//       const updatedReport = {...defaultReport, ...report};
//       // const currentReports: [] = await reports();

//       cache.writeQuery({
//         query: GET_REPORTS,
//         data: {
//           reports: [...(reports || []), updatedReport],
//         },
//       });

//       cache.updateQuery(
//         {
//           query: DEFAULT_REPORT_GQL,
//           variables: updatedReport,
//         },
//         () => ({
//           defaultReport: updatedReport,
//         }),
//       );
//     },
//     [cache, reports, defaultReport],
//   );

//   return {
//     addReport,
//     defaultReportParsedMonth,
//     defaultReportParsedYear,
//     defaultReportParsedMonthAndYear,
//     setDefaultReport,
//     updateDefaultReport,
//     defaultReport,
//     getParsedMonth,
//     deleteReport,
//   };
// }
